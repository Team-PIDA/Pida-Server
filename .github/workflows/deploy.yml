name: Deploy

on:
  push:
    branches:
      - develop

# permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  deploy:
    name: CD
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
      ECS_CONTAINER_SERVICE_NAME: ${{ secrets.ECS_CONTAINER_SERVICE_NAME }}
      ECR_CONTAINER_NAME: ${{ secrets.ECR_CONTAINER_NAME }}
      ECS_TASK_NAME: ${{ secrets.ECS_TASK_NAME }}
      ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}

    strategy:
      matrix:
        java-version: [ "21" ]
        kotlin-version: [ "1.9.23" ]
        distribution: [ "corretto" ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          kotlin-version: ${{ matrix.kotlin-version }}
          distribution: ${{ matrix.distribution }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        id: gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: |
            :core:core-api:build
            --scan

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.OIDC_ROLE_TO_ASSUME }}
          role-session-name: pida-server

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'false'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Docker 빌드 시 파일 포함
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ steps.vars.outputs.short_sha }}
        run: |
          docker buildx build \
            --platform linux/arm64 \
            --build-arg PROFILE=prod \
            -f ./docker/DockerfileProd \
            -t $ECR_REPOSITORY:latest \
            --load .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

      - name: Download Task Definition Template
        run: |
          aws ecs describe-task-definition \
            --task-definition $ECS_TASK_NAME \
            --query taskDefinition \
            > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECR_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_CONTAINER_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}